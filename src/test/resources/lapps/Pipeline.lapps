/* Testing services in a pipeline. */

@Grab('org.lappsgrid:discriminator:1.2.1')
import org.lappsgrid.discriminator.*

@Grab('org.anc.lapps:serialization:0.10.0')
import org.anc.lapps.serialization.Container

void show(Data d) {
    println "Type: ${DiscriminatorRegistry.get(d.discriminator)} (${d.discriminator})"
    println d.payload
}

include 'Datasources'
include 'GateServices'
include 'Converters'

def source = masc.json.text
String[] keys = source.list()

def pipeline = []
pipeline << convert.json2gate
pipeline << gate.tokenizer
pipeline << gate.gazetteer
pipeline << gate.splitter
pipeline << gate.tagger
pipeline << convert.gate2json

File tmp = new File('/tmp/pipeline')
if (!tmp.exists()) {
    if (!tmp.mkdirs()) {
        println "Unable to create ${tmp.path}"
        return
    }
}

(0..9).each { i ->
    String key = keys[i]
    String filename = "${key}.json"
    File file = new File(tmp, filename)
    println "Generating ${file.path}"
    Data data = masc.json.text.get(keys[i])
    pipeline.each { pr ->
        data = pr.execute(data)
    }
    if (data.discriminator == Types.ERROR) {
        println data.payload
    }
    else {
        Container container = new Container(data.payload)
        container.metadata.version = '0.9.0'
        file.text = container.toPrettyJson()
    }
}
return

pipe = Pipeline {
    destination "/tmp/gate"
    datasource masc.raw.text
    extension 'xml'
    add gate.tokenizer
    add gate.splitter
    //add gate.tagger
}

pipe.run()
